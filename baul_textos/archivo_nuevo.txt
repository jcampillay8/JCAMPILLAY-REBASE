Writing Unnecessary Code: A Real-World Example Once upon a time, a developer--let's call him Max (ahem)--mistakenly thought he could ignore this rule. In his program, there were drop-down boxes where users could pick a value. Every company that used the program could customize the list of choices displayed in each drop-down box. Some companies might want the choices to be names of colors. Others might want them to be names of cities. They could be anything. So, the list of valid choices needed to be stored somewhere that each company could modify it. The obvious thing to do was just to store the list of values, and nothing else. After all, that's all that was needed. But Max decided to store two things: the list of values, and also information about whether each value was currently "active"--that is, if users could currently select that value, or if it was temporarily disabled. However, Max never wrote any code to actually use the information about whether or not each field was active. All choices were active, all the time, no matter what the stored data said. He was sure that he was just about to write code to use the "active" information, though--maybe even tomorrow. Several years passed, and the code to handle the "active" data didn't get written. Instead, the data just sat there, unused, confusing people and causing bugs. Numerous customers and developers wrote to Max, wondering why nothing happened when they manually edited the list of values and set choices as being inactive. One developer improperly assumed that the "active" field was in use and wrote a piece of code that used it, even though the rest of the system didn't use it. This got through to customers, and they started reporting strange bugs that took a lot of work to track down. Eventually, some developer came along and said, "Today I will implement the ability to disable choices!" However, he discovered that the "active" field wasn't designed perfectly for his needs, so he had to do a fair bit of redesign work to implement his feature. Net result: several bugs, lots of confusion, and extra work for the developer who did eventually actually need the code. And this was a relatively minor violation of the rule! Severe violations can have considerably worse consequences, including missed deadlines, major catastrophes, and possibly even the destruction of your software project.