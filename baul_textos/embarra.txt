maintenance totals $1,000. That's equal to the original "value now" and cost of implementation, after just 10 days. After 100 days, the future value totals $100,000, and the maintenance effort comes to $10,000. After 1,000 days, the total future value reaches $1,000,000 and the effort of maintenance totals $100,000. At this point, the original "value now" and cost of implementation look pretty tiny in comparison. As time goes on, they will become even less significant, eventually disappearing from importance entirely. Thus, as time goes on our equation reduces to this:1 And in fact, nearly all decisions in software design reduce entirely to measuring the future value of a change versus its effort of maintenance. There are situations in which the present value and the implementation effort are large enough to be significant in a decision, but they are extremely rare. In general, software systems are maintained for so long that the value now and the effort of implementation are guaranteed to become insignificant in almost all cases when compared to the long-term future value and effort of maintenance. What You Do and Do Not Want The primary lesson to learn here is that we want to avoid situations where, for a given change, the effort of maintenance will eventually outweigh the future value. For example, imagine that you implement a change where the effort and value look like this across five days: Day Effort Value 1 $10 $1,000 2 $100 $100 3 $1,000 $10 4 $10,000 $1 5 $100,000 $0.10 Total $111,110 $1111.10 1. Optional note for mathematicians: If you have studied calculus, you may have realized that we're starting to analyze the limit of the equation as time approaches infinity. In general, you should be thinking of the Equation of Software Design as though it were an infinite series with a limit, not just a static equation. However, for simplicity's sake, it is written here as a static equation.