Maintenance The equation as we have it so far is very simple, but it is missing an important element --time. Not only do you have to implement a change, but you also have to maintain it over time. All changes require maintenance. This is very obvious with some changes-- if you're writing a program to do people's taxes, you're going to have to update it for the new tax laws every year. But even changes that don't immediately seem to have a long-term maintenance cost will have one, even if it's just the cost of having to make sure that that code still works when you're testing it next year. We must also consider value both now and in the future. When we implement some change to our system, it will help our current users, but it may also help all our future users. It may even affect the total number of future users, thus changing how much our software as a whole helps people. Some features even change in value over time. For example, having a tax program understand the year 2009 tax laws is valuable in 2009 and 2010, but not so valuable once 2011 comes around. That's a feature that becomes less valuable over time. Some features also become more valuable over time. So, looking at this realistically, we see that effort actually involves both the effort of implementation and the effort of maintenance, and value involves both the value now and the value in the future. In equation form, this looks like: